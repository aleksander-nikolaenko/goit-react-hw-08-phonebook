{"version":3,"file":"static/js/login-page.7a7cf733.chunk.js","mappings":"0LACA,EAA0B,8B,SCGbA,EAAe,WAC1B,OACE,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,UAAU,oBACVC,OAAQ,GACRC,MAAO,GACPC,YAAa,EACbC,MAAM,QACNC,eAAe,c,sWCOnBC,EAAWC,EAAQ,MAEjBC,GAAQC,EAAAA,EAAAA,KAEC,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,cAC9B,EAA4BC,EAAAA,SAAe,CACzCC,MAAO,GACPC,SAAU,GACVC,iBAAiB,IAHnB,eAAOC,EAAP,KAAeC,EAAf,KAMA,EAA4BL,EAAAA,SAAe,CACzCC,MAAO,GACPC,SAAU,KAFZ,eAAOI,EAAP,KAAeC,EAAf,KAKAP,EAAAA,WAAgB,WACd,GAAIQ,aAAaC,QAAQ,aAAc,CACrC,IAAMC,EAAeF,aAAaC,QAAQ,aACpCE,EAAQvB,EAASwB,IAAIC,QAAQH,EAAc,aAC3CI,EAAgBC,KAAKC,MACzBD,KAAKC,MAAML,EAAMM,SAAS7B,EAAS8B,IAAIC,QAEjClB,EAAqCa,EAArCb,MAAOC,EAA8BY,EAA9BZ,SAAUC,EAAoBW,EAApBX,gBACzBE,GAAU,kBACLD,GADI,IAEPH,MAAAA,EACAC,SAAAA,EACAC,gBAAAA,QAIH,IACH,IAAMiB,EAAkB,SAACC,EAAMC,GAC7B,OAAKA,GAOLf,GAAU,kBACLD,GADI,cAENe,EAFM,OAIF,IAVLd,GAAU,kBACLD,GADI,cAENe,EAFM,UAEIA,EAFJ,oBAIF,IAQLE,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdjB,GAAU,kBAAKD,GAAN,cAAeiB,EAAOC,MAM3BI,EAAY,mCAAG,WAAMF,GAAN,gFACnBA,EAAMG,iBACAC,EAAO,IAAIC,SAASL,EAAMM,eAC1BC,EAAW,CACf9B,MAAO2B,EAAKI,IAAI,SAChB9B,SAAU0B,EAAKI,IAAI,aAEfC,EAAYlB,KAAKmB,WAAL,kBACbH,GADa,IAEhB5B,gBAAiBC,EAAOD,oBAIxBiB,EAAgB,QAASW,EAAS9B,SAClCmB,EAAgB,WAAYW,EAAS7B,UAdpB,wBAgBXiC,EAAO/C,EAASwB,IAAIwB,QACxBrB,KAAKmB,UAAUD,GACf,aACAhB,WACFb,EAAOD,gBACHK,aAAa6B,QAAQ,YAAaF,GAClC3B,aAAa8B,WAAW,aAtBX,mBAwBT3C,GAAS4C,EAAAA,EAAAA,IAAUR,IAAWS,SAxBrB,QAyBf/C,EAASgD,EAAAA,EAAAA,cAzBM,kDA2BfC,QAAQC,KAAR,MA3Be,0DAAH,sDAgClB,OACE,SAACC,EAAA,EAAD,CAAetD,MAAOA,EAAtB,UACE,UAACuD,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,WACE,SAACC,EAAA,GAAD,KACA,UAACC,EAAA,EAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,WAQE,SAACC,EAAA,EAAD,CAAQL,GAAI,CAAEM,EAAG,EAAGC,QAAS,kBAA7B,UACE,SAACC,EAAA,EAAD,OAEF,SAACC,EAAA,EAAD,CAAYb,UAAU,KAAKc,QAAQ,KAAnC,sBAGA,UAACX,EAAA,EAAD,CACEH,UAAU,OACVe,SAAUnC,EACVoC,YAAU,EACVZ,GAAI,CAAEa,GAAI,GAJZ,WAME,SAACC,EAAA,EAAD,CACEC,OAAO,SACPC,QAAS5D,EAAOL,MAChBkE,WAAY7D,EAAOL,MACnBmE,UAAQ,EACRC,WAAS,EACTC,GAAG,QACHjD,KAAK,QACLC,MAAOlB,EAAOH,MACdsE,MAAM,gBACNC,aAAa,QACbC,WAAS,EACTC,SAAUnD,KAEZ,SAACyC,EAAA,EAAD,CACEC,OAAO,SACPC,QAAS5D,EAAOJ,SAChBiE,WAAY7D,EAAOJ,SACnBkE,UAAQ,EACRC,WAAS,EACTC,GAAG,WACHjD,KAAK,WACLC,MAAOlB,EAAOF,SACdyE,KAAK,WACLJ,MAAM,WACNC,aAAa,mBACbE,SAAUnD,KAEZ,SAACqD,EAAA,EAAD,CACEC,SACE,SAACC,EAAA,EAAD,CACEC,QAAS3E,EAAOD,gBAChBuE,SA5Fa,SAAAlD,GAC3BnB,GAAU,kBAAKD,GAAN,IAAcD,gBAAiBqB,EAAMC,OAAOsD,YA4FvCC,WAAY,CAAE,aAAc,cAC5B1D,MAAM,WACNpC,MAAM,YAGVqF,MAAM,iBAER,SAACU,EAAA,EAAD,CACEN,KAAK,SACLN,WAAS,EACTT,QAAQ,YACRV,GAAI,CAAEgC,GAAI,EAAGC,GAAI,GAJnB,SAMGtF,GAAY,SAAClB,EAAA,EAAD,IAAmB,aAElC,SAACyG,EAAA,GAAD,CAAMC,WAAS,EAACC,eAAe,SAA/B,UACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAAV,UACE,SAAC,KAAD,CAAMC,GAAI/C,EAAAA,EAAAA,aAAV,SACG,kDCvLnB,IAIA,EAJkB,WAChB,OAAO,SAACjD,EAAD,M","sources":["webpack://goit-react-hw-08-phonebook/./src/components/LoaderButton/LoaderButton.module.css?55b0","components/LoaderButton/LoaderButton.jsx","components/SignIn/SignIn.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"LoaderButton_wrapper__WcgzK\"};","import { Oval } from 'react-loader-spinner';\n\nimport styles from './LoaderButton.module.css';\n\nexport const LoaderButton = () => {\n  return (\n    <div className={styles.wrapper}>\n      <Oval\n        ariaLabel=\"loading-indicator\"\n        height={24}\n        width={24}\n        strokeWidth={8}\n        color=\"white\"\n        secondaryColor=\"white\"\n      />\n    </div>\n  );\n};\n","import * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { Link } from 'react-router-dom';\nimport { routesPaths } from 'routerSettings/routesPaths';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginUser } from 'redux/operations/operations-user';\nimport selectors from 'redux/selectors';\nimport { LoaderButton } from 'components/LoaderButton';\nvar CryptoJS = require('crypto-js');\n\nconst theme = createTheme();\n\nexport default function SignIn() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectors.getIsLoading);\n  const [values, setValues] = React.useState({\n    email: '',\n    password: '',\n    checkedRemember: false,\n  });\n\n  const [errors, setErrors] = React.useState({\n    email: '',\n    password: '',\n  });\n\n  React.useEffect(() => {\n    if (localStorage.getItem('savedUser')) {\n      const receivedData = localStorage.getItem('savedUser');\n      const bytes = CryptoJS.AES.decrypt(receivedData, 'savedUser');\n      const decryptedData = JSON.parse(\n        JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      );\n      const { email, password, checkedRemember } = decryptedData;\n      setValues({\n        ...values,\n        email,\n        password,\n        checkedRemember,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const validationField = (name, value) => {\n    if (!value) {\n      setErrors({\n        ...errors,\n        [name]: `${name} is required`,\n      });\n      return false;\n    }\n    setErrors({\n      ...errors,\n      [name]: ``,\n    });\n    return true;\n  };\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setValues({ ...values, [name]: value });\n  };\n  const handleRememberChange = event => {\n    setValues({ ...values, checkedRemember: event.target.checked });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    const userData = {\n      email: data.get('email'),\n      password: data.get('password'),\n    };\n    const savedData = JSON.stringify({\n      ...userData,\n      checkedRemember: values.checkedRemember,\n    });\n\n    if (\n      validationField('email', userData.email) &&\n      validationField('password', userData.password)\n    ) {\n      const text = CryptoJS.AES.encrypt(\n        JSON.stringify(savedData),\n        'savedUser'\n      ).toString();\n      values.checkedRemember\n        ? localStorage.setItem('savedUser', text)\n        : localStorage.removeItem('savedUser');\n      try {\n        await dispatch(loginUser(userData)).unwrap();\n        navigate(routesPaths.contactsPage);\n      } catch (error) {\n        console.warn(error);\n      }\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 3,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit}\n            noValidate\n            sx={{ my: 3 }}\n          >\n            <TextField\n              margin=\"normal\"\n              error={!!errors.email}\n              helperText={errors.email}\n              required\n              fullWidth\n              id=\"email\"\n              name=\"email\"\n              value={values.email}\n              label=\"Email Address\"\n              autoComplete=\"email\"\n              autoFocus\n              onChange={handleChange}\n            />\n            <TextField\n              margin=\"normal\"\n              error={!!errors.password}\n              helperText={errors.password}\n              required\n              fullWidth\n              id=\"password\"\n              name=\"password\"\n              value={values.password}\n              type=\"password\"\n              label=\"Password\"\n              autoComplete=\"current-password\"\n              onChange={handleChange}\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={values.checkedRemember}\n                  onChange={handleRememberChange}\n                  inputProps={{ 'aria-label': 'controlled' }}\n                  value=\"remember\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Remember me\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              {isLoading ? <LoaderButton /> : 'Sign In'}\n            </Button>\n            <Grid container justifyContent=\"center\">\n              <Grid item>\n                <Link to={routesPaths.registerPage}>\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n","import SignIn from 'components/SignIn';\n\nconst LoginPage = () => {\n  return <SignIn />;\n};\n\nexport default LoginPage;\n"],"names":["LoaderButton","className","styles","ariaLabel","height","width","strokeWidth","color","secondaryColor","CryptoJS","require","theme","createTheme","SignIn","navigate","useNavigate","dispatch","useDispatch","isLoading","useSelector","selectors","React","email","password","checkedRemember","values","setValues","errors","setErrors","localStorage","getItem","receivedData","bytes","AES","decrypt","decryptedData","JSON","parse","toString","enc","Utf8","validationField","name","value","handleChange","event","target","handleSubmit","preventDefault","data","FormData","currentTarget","userData","get","savedData","stringify","text","encrypt","setItem","removeItem","loginUser","unwrap","routesPaths","console","warn","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","onSubmit","noValidate","my","TextField","margin","error","helperText","required","fullWidth","id","label","autoComplete","autoFocus","onChange","type","FormControlLabel","control","Checkbox","checked","inputProps","Button","mt","mb","Grid","container","justifyContent","item","to"],"sourceRoot":""}
{"version":3,"file":"static/js/contacts-page.22aa3158.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/LoaderButton/LoaderButton.module.css?55b0","components/LoaderButton/LoaderButton.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsItem/ContactsItem.module.css?5f2a","components/ContactsList/ContactsItem/ContactsItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"LoaderButton_wrapper__WcgzK\"};","import { Oval } from 'react-loader-spinner';\n\nimport styles from './LoaderButton.module.css';\n\nexport const LoaderButton = () => {\n  return (\n    <div className={styles.wrapper}>\n      <Oval\n        ariaLabel=\"loading-indicator\"\n        height={24}\n        width={24}\n        strokeWidth={8}\n        color=\"white\"\n        secondaryColor=\"white\"\n      />\n    </div>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"text\":\"ContactForm_text__kqq6l\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport selectors from 'redux/selectors';\nimport { addContact } from 'redux/operations/operations-contacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LoaderButton } from 'components/LoaderButton';\n\nimport styles from './ContactForm.module.css';\n\nconst { getContacts, getContactsStatus } = selectors;\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isCreating = useSelector(getContactsStatus) === 'creating';\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const hasName = contacts.find(\n      contact => contact.name === name || contact.number === number\n    );\n    if (hasName) {\n      toast.warn(`Name or Number is already in contacts.`);\n    } else {\n      const contact = {\n        id: nanoid(),\n        name,\n        number,\n      };\n      dispatch(addContact(contact))\n        .unwrap()\n        .then(res => {\n          toast.success(`${res.name} is add in contacts.`);\n          reset();\n        })\n        .catch(() => {\n          toast.error(`${name} isn't add in contacts.`);\n        });\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <label htmlFor={nameInputId} className={styles.label}>\n        <p className={styles.text}>Name</p>\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Petr Petrov\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          onChange={handleChange}\n          required={true}\n        />\n      </label>\n      <label htmlFor={numberInputId} className={styles.label}>\n        <p className={styles.text}>Number</p>\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+38-033-333-33-33\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number}\n          onChange={handleChange}\n          required={true}\n        />\n      </label>\n\n      <button type=\"submit\" className={styles.button}>\n        {isCreating && <LoaderButton />}\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactsItem_item__teaw-\",\"text\":\"ContactsItem_text__llkOD\",\"number\":\"ContactsItem_number__CBgn+\",\"button\":\"ContactsItem_button__S+pxM\",\"wrapper\":\"ContactsItem_wrapper__6gZUn\"};","import PropTypes from 'prop-types';\nimport styles from './ContactsItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations/operations-contacts';\nimport { useSelector } from 'react-redux';\nimport { LoaderButton } from 'components/LoaderButton';\nimport { useState } from 'react';\nimport selectors from 'redux/selectors';\nimport { toast } from 'react-toastify';\n\nconst { getContactsStatus } = selectors;\n\nexport const ContactsItem = props => {\n  const { id, name, number } = props;\n  const dispatch = useDispatch();\n  const deleting = useSelector(getContactsStatus) === 'deleting';\n  const [isDeleting, setDeleting] = useState(deleting);\n  const handleDeleteContact = async id => {\n    setDeleting(true);\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(res => {\n        toast.success(`Contact \"${res.name}\" is deleting`);\n      })\n      .catch(error => {\n        setDeleting(false);\n        console.log(error.message);\n        toast.error(`Contact \"${name}\" is not deleting`);\n      });\n  };\n  return (\n    <li className={styles.item}>\n      <button\n        className={styles.button}\n        type=\"Submit\"\n        onClick={() => handleDeleteContact(id)}\n      >\n        {isDeleting ? <LoaderButton /> : <span>&#128503;</span>}\n      </button>\n      <div className={styles.wrapper}>\n        <p className={styles.text}>&#128447;&nbsp;&nbsp;{name}</p>\n        <p className={styles.number}>&#9742;&nbsp;&nbsp;{number}</p>\n      </div>\n    </li>\n  );\n};\n\nContactsItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\"};","import { ContactsItem } from './ContactsItem';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations/operations-contacts';\nimport selectors from 'redux/selectors';\nimport LoaderPage from 'components/LoaderPage';\nimport { toast } from 'react-toastify';\n\nimport styles from './ContactsList.module.css';\n\nconst { getContactsStatus, getFilteredContacts } = selectors;\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts())\n      .unwrap()\n      .then(() => {\n        toast.success(`Contacts updated`);\n      })\n      .catch(() => {\n        toast.error(`Contacts didn't updated`);\n      });\n  }, [dispatch]);\n  const contacts = useSelector(getFilteredContacts);\n  const ContactsStatus = useSelector(getContactsStatus);\n  const isLoading = ContactsStatus === 'loading';\n  return (\n    <>\n      {isLoading && <LoaderPage />}\n      <ul className={styles.list}>\n        {contacts.map(({ id, name, number }) => (\n          <ContactsItem key={id} name={name} number={number} id={id} />\n        ))}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__VVOCq\"};","import PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nexport const Container = ({ children }) => {\n  return <div className={styles.container}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\",\"text\":\"Filter_text__uqQRu\"};","import styles from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from 'redux/slice/slice-contacts';\nimport selectors from 'redux/selectors';\n\nconst { getFilterValue } = selectors;\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilterValue);\n  const handleFilterValue = event => {\n    dispatch(setFilterValue(event.target.value));\n  };\n\n  return (\n    <label className={styles.label}>\n      <p className={styles.text}>Find contacts by name</p>\n      <input\n        className={styles.input}\n        type=\"text\"\n        value={value}\n        onChange={handleFilterValue}\n      />\n    </label>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactsList } from 'components/ContactsList';\nimport { Container } from 'components/Container';\nimport { Filter } from 'components/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["LoaderButton","className","styles","ariaLabel","height","width","strokeWidth","color","secondaryColor","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getContacts","selectors","getContactsStatus","ContactForm","dispatch","useDispatch","contacts","useSelector","isCreating","useState","name","setName","number","setNumber","nameInputId","numberInputId","handleChange","event","currentTarget","value","onSubmit","preventDefault","hasName","find","contact","toast","addContact","unwrap","then","res","catch","htmlFor","type","placeholder","pattern","title","onChange","required","ContactsItem","props","deleting","isDeleting","setDeleting","handleDeleteContact","deleteContact","error","console","log","message","onClick","getFilteredContacts","ContactsList","useEffect","fetchContacts","isLoading","LoaderPage","map","Container","children","getFilterValue","Filter","setFilterValue","target"],"sourceRoot":""}